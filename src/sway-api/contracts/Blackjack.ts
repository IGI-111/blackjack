/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.3
  Forc version: 0.69.1
  Fuel-Core version: 0.46.0
*/

import { Contract as __Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  Address,
  BigNumberish,
  BN,
  Bytes,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum BlackjackErrorInput { InvalidAmount = 'InvalidAmount', InvalidCard = 'InvalidCard', GameEnded = 'GameEnded', InvalidPhase = 'InvalidPhase', RandomnessRanOut = 'RandomnessRanOut', RandomnessNotReady = 'RandomnessNotReady', InvalidSeed = 'InvalidSeed', RevealTooEarly = 'RevealTooEarly', BetTooLarge = 'BetTooLarge', NoPayoutOutcome = 'NoPayoutOutcome' };
export enum BlackjackErrorOutput { InvalidAmount = 'InvalidAmount', InvalidCard = 'InvalidCard', GameEnded = 'GameEnded', InvalidPhase = 'InvalidPhase', RandomnessRanOut = 'RandomnessRanOut', RandomnessNotReady = 'RandomnessNotReady', InvalidSeed = 'InvalidSeed', RevealTooEarly = 'RevealTooEarly', BetTooLarge = 'BetTooLarge', NoPayoutOutcome = 'NoPayoutOutcome' };
export enum OutcomeInput { Win = 'Win', BlackJack = 'BlackJack', Lose = 'Lose', Bust = 'Bust', Push = 'Push', Continue = 'Continue' };
export enum OutcomeOutput { Win = 'Win', BlackJack = 'BlackJack', Lose = 'Lose', Bust = 'Bust', Push = 'Push', Continue = 'Continue' };
export enum ReentrancyErrorInput { NonReentrant = 'NonReentrant' };
export enum ReentrancyErrorOutput { NonReentrant = 'NonReentrant' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type GameStateInput = { dealer_cards: Bytes, player_cards: Bytes, dealer_score: BigNumberish, player_score: BigNumberish, outcome: OutcomeInput, bet: BigNumberish };
export type GameStateOutput = { dealer_cards: Bytes, player_cards: Bytes, dealer_score: number, player_score: number, outcome: OutcomeOutput, bet: BN };

const abi = {
  "programType": "contract",
  "specVersion": "1.1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "enum Outcome",
      "concreteTypeId": "1ab10657bbd8ea67349db4e5e4cb8dcfe03a1aab6a751cdf7341e6f0833f227c",
      "metadataTypeId": 0
    },
    {
      "type": "enum error::BlackjackError",
      "concreteTypeId": "f863215f915ac4cc82f620b99771706f878dad88b91a92cea3a5eed237abe8e2",
      "metadataTypeId": 1
    },
    {
      "type": "enum reentrancy::errors::ReentrancyError",
      "concreteTypeId": "e52e660ff9a330c417b6493bb8d3d0049bafaa6c4a771b32b205d71bc2bc5ace",
      "metadataTypeId": 2
    },
    {
      "type": "struct GameState",
      "concreteTypeId": "07399603de4bf27be7a8b23fd2d8486e94bfec4200a3274e734cdaa9ebc6f186",
      "metadataTypeId": 4
    },
    {
      "type": "struct std::address::Address",
      "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308",
      "metadataTypeId": 5
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 6
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    },
    {
      "type": "u8",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "metadataTypes": [
    {
      "type": "enum Outcome",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "Win",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "BlackJack",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Lose",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Bust",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Push",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Continue",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum error::BlackjackError",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "InvalidAmount",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Invalid amount"
        },
        {
          "name": "InvalidCard",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Invalid card"
        },
        {
          "name": "GameEnded",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Game has ended"
        },
        {
          "name": "InvalidPhase",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Invalid phase"
        },
        {
          "name": "RandomnessRanOut",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Randomness has run out"
        },
        {
          "name": "RandomnessNotReady",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Randomness is not ready"
        },
        {
          "name": "InvalidSeed",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Invalid seed"
        },
        {
          "name": "RevealTooEarly",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Reveal too early"
        },
        {
          "name": "BetTooLarge",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Bet is larger than max payout"
        },
        {
          "name": "NoPayoutOutcome",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
          "errorMessage": "Trying to redeem an outcome with no payout"
        }
      ]
    },
    {
      "type": "enum reentrancy::errors::ReentrancyError",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "NonReentrant",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 3
    },
    {
      "type": "struct GameState",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "dealer_cards",
          "typeId": 7
        },
        {
          "name": "player_cards",
          "typeId": 7
        },
        {
          "name": "dealer_score",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "player_score",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "outcome",
          "typeId": 0
        },
        {
          "name": "bet",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::bytes::Bytes",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "buf",
          "typeId": 8
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::bytes::RawBytes",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "ptr",
          "typeId": 3
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "fund",
      "inputs": [],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "name": "game_state",
      "inputs": [
        {
          "name": "game",
          "concreteTypeId": "f597b637c3b0f588fb8d7086c6f4735caa3122b85f0423b82e489f9bb58e2308"
        }
      ],
      "output": "07399603de4bf27be7a8b23fd2d8486e94bfec4200a3274e734cdaa9ebc6f186",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "name": "hit",
      "inputs": [
        {
          "name": "seed",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "redeem",
      "inputs": [
        {
          "name": "claimed_outcome",
          "concreteTypeId": "1ab10657bbd8ea67349db4e5e4cb8dcfe03a1aab6a751cdf7341e6f0833f227c"
        }
      ],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "stand",
      "inputs": [
        {
          "name": "seed",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "start",
      "inputs": [
        {
          "name": "seed",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "bet",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "13866877265493744985",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
    },
    {
      "logId": "17898186038444737740",
      "concreteTypeId": "f863215f915ac4cc82f620b99771706f878dad88b91a92cea3a5eed237abe8e2"
    },
    {
      "logId": "16514249102412951748",
      "concreteTypeId": "e52e660ff9a330c417b6493bb8d3d0049bafaa6c4a771b32b205d71bc2bc5ace"
    },
    {
      "logId": "1923325489747389031",
      "concreteTypeId": "1ab10657bbd8ea67349db4e5e4cb8dcfe03a1aab6a751cdf7341e6f0833f227c"
    },
    {
      "logId": "1515152261580153489",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    },
    {
      "logId": "14454674236531057292",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "messagesTypes": [],
  "configurables": [],
  "errorCodes": {
    "18446744069414584320": {
      "pos": {
        "pkg": "blackjack",
        "file": "src/main.sw",
        "line": 66,
        "column": 17
      },
      "logId": "17898186038444737740",
      "msg": null
    },
    "18446744069414584321": {
      "pos": {
        "pkg": "blackjack",
        "file": "src/main.sw",
        "line": 84,
        "column": 13
      },
      "logId": "17898186038444737740",
      "msg": null
    },
    "18446744069414584322": {
      "pos": {
        "pkg": "blackjack",
        "file": "src/score.sw",
        "line": 25,
        "column": 13
      },
      "logId": "17898186038444737740",
      "msg": null
    },
    "18446744069414584323": {
      "pos": {
        "pkg": "blackjack",
        "file": "src/main.sw",
        "line": 200,
        "column": 18
      },
      "logId": "17898186038444737740",
      "msg": null
    },
    "18446744069414584324": {
      "pos": {
        "pkg": "blackjack",
        "file": "src/main.sw",
        "line": 151,
        "column": 13
      },
      "logId": "17898186038444737740",
      "msg": null
    }
  }
};

const storageSlots: StorageSlot[] = [];

export class BlackjackInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    fund: FunctionFragment;
    game_state: FunctionFragment;
    hit: FunctionFragment;
    redeem: FunctionFragment;
    stand: FunctionFragment;
    start: FunctionFragment;
  };
}

export class Blackjack extends __Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: BlackjackInterface;
  declare functions: {
    fund: InvokeFunction<[], void>;
    game_state: InvokeFunction<[game: AddressInput], GameStateOutput>;
    hit: InvokeFunction<[seed: string], void>;
    redeem: InvokeFunction<[claimed_outcome: OutcomeInput], void>;
    stand: InvokeFunction<[seed: string], void>;
    start: InvokeFunction<[seed: string, bet: BigNumberish], void>;
  };

  constructor(
    id: string | Address,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
